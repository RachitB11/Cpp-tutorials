#include <iostream>
#include <cstdlib>
#include <random>
#include <stack>
#include <limits.h>

using namespace std;

// Big O
// 1     static
// logn  divide and conquer or binary search dividing up into 2 pieces
// n     linearly with n
// nlogn merge search, searching through a deck of cards
// n^2   nested loops
// n!

// Data structures to consider
// vector, arr, stack, queue, map, unordered_map, linked_list, binary tree, graph / adjacency matrix.

void swap(int* arr, int i, int j)
{
  int temp = arr[i];
  arr[i] = arr[j];
  arr[j]= temp;
}

void selectionSort(int* arr, int n)
{
  for(int i=0; i<n; i++)
  {
    int min = INT_MAX;
    int ind_min = 0;
    for(int j=i; j<n; j++)
    {
      if(arr[j]<=min)
      {
        min  = arr[j];
        ind_min = j;
      }
    }
    if (ind_min!=i) swap(arr,i,ind_min);
  }
}

void insertionSort(int* arr, int n)
{
  for(int i=1; i<n; i++)
  {
    int j = i;
    while(j!=0)
    {
      if(arr[j]<arr[j-1]) swap(arr,j,j-1);
      else break;
      j--;
    }
  }
}

void bubbleSort(int* arr, int n)
{
  for(int i=0; i<n-1; i++)
  {
    for(int j=0; j<n-1-i; j++)
    {
      if(arr[j]>arr[j+1]) swap(arr,j,j+1);
    }
  }
}

void shellSort(int dizi[], int elemanSayisi) {
    int j;
    for (int gap = elemanSayisi / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < elemanSayisi; ++i) {
            int temp = dizi[i];
            for (j = i; j >= gap && temp < dizi[j - gap]; j -= gap) {
                dizi[j] = dizi[j - gap];
            }
            dizi[j] = temp;
        }
    }
}

void merge(int* arr, int l, int r, int m)
{
  int len_l = m-l+1;
  int len_r = r-(m+1)+1;

  // cout<<l<<","<<r<<","<<m<<endl;

  int lef[len_l];
  int rig[len_r];

  for(int i=0; i<len_l; i++)
  {
    lef[i] = arr[l+i];
  }

  for(int i=0; i<len_r; i++)
  {
    rig[i] = arr[m+1+i];
  }

  int l_ind=0 ;
  int r_ind=0 ;

  for(int i=0; i<len_r+len_l; i++)
  {
    if(l_ind<len_l && r_ind<len_r)
    {
      if(lef[l_ind]<rig[r_ind])
      {
        arr[l+i] = lef[l_ind];
        l_ind++;
      }
      else
      {
        arr[l+i] = rig[r_ind];
        r_ind++;
      }
    }
    else if(r_ind==len_r)
    {
      arr[l+i] = lef[l_ind];
      l_ind++;
    }
    else if(l_ind==len_l)
    {
      arr[l+i] = rig[r_ind];
      r_ind++;
    }
    // cout<<arr[l+i]<<endl;
  }
}

void mergeSort(int* arr, int l, int r)
{
  if(l<r)
  {
    int m = l + (r-l)/2;
    mergeSort(arr,l,m);
    mergeSort(arr,m+1,r);
    merge(arr,l,r,m);
  }
}

void quickSort(int* arr, int l, int r)
{
  if(l<r)
  {
    int ind_l = l;
    int ind_r = r;

    bool move_left = true;

    while(ind_l!=ind_r)
    {
      if(move_left)
      {
        if(arr[ind_l]<arr[ind_r]) ind_l++;
        else
        {
          swap(arr,ind_l,ind_r);
          move_left=false;
          ind_r--;
        }
      }
      else
      {
        if(arr[ind_l]<arr[ind_r]) ind_r--;
        else
        {
          swap(arr,ind_l,ind_r);
          move_left=true;
          ind_l++;
        }
      }
    }

    quickSort(arr,l,ind_l-1);
    quickSort(arr,ind_l+1,r);
  }
}

void findLeaders(int*arr, int n)
{
  stack<int> leader;
  leader.push(arr[0]);
  for(int i=1; i<n;i++)
  {
    while(!leader.empty())
    {
      if(arr[i]>leader.top()) leader.pop();
      else break;
    }
    leader.push(arr[i]);
  }

  cout<<"Leaders: ";
  while(!leader.empty())
  {
    cout<<leader.top()<<" ";
    leader.pop();
  }
  cout<<endl;
}


int main() {

    int len = 20;

    int sirala[len];
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> dis(0, len);

    for (int n=0; n<len; ++n)
        //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
        sirala[n] = dis(gen);

    //Create Dummy Array!!!
    // int sirala[len];
    // cout << "SORT ME LIKE YOU DO!" << endl;
    // for (int i = 0; i < len; ++i) {
    //     if (i % 2 == 0) {
    //         sirala[i] = i;
    //     }
    //     else {
    //         sirala[i] = len - i;
    //     }
    // }

    //Print Dummy Array!
    for (int k = 0; k < len; ++k) {
        cout << sirala[k] << " ";
    }
    cout << "\n";

    // Find leaders
    findLeaders(sirala,len);

    //Sort Functions:
    // selectionSort(sirala,len);
    // insertionSort(sirala,len);
    bubbleSort(sirala,len);
    // shellSort(sirala,len);
    // mergeSort(sirala,0,len-1);
    // quickSort(sirala, 0, len-1);
    //heapSort(sirala, len);
    //radixSort(sirala,len);

    //Print sorted arrays
    for (int j = 0; j < len; ++j) {
        cout << sirala[j] << " ";
    }

    cout<<endl;

    //Return 0 :)
    return 0;
}
